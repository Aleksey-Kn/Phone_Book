type: edu
custom_name: stage3
files:
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\nimport phonebook.Main;\n\nimport\
    \ java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport\
    \ java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class PhoneBookTest\
    \ extends StageTest {\n    public PhoneBookTest() {\n        super(Main.class);\n\
    \    }\n    \n    private long timeOnTestStart;\n    \n    @Override\n    public\
    \ List<TestCase> generate() {\n        timeOnTestStart = System.currentTimeMillis();\n\
    \        return Arrays.asList(\n                new TestCase().setTimeLimit(30\
    \ * 60 * 1000)\n        );\n    }\n    \n    private CheckResult checkPhrases(String\
    \ reply, String... phrases) {\n        reply = reply.toLowerCase();\n        for\
    \ (String phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    @Override\n\
    \    public CheckResult check(String reply, Object clue) {\n        long realTime\
    \ = System.currentTimeMillis() - timeOnTestStart;\n        \n        reply = reply.toLowerCase();\n\
    \        \n        CheckResult res = checkPhrases(reply,\n                \"found\"\
    ,\n                \"min.\",\n                \"sec.\",\n                \"ms.\"\
    ,\n                \"sorting time\",\n                \"searching time\",\n  \
    \              \"linear search\",\n                \"bubble sort\",\n        \
    \        \"jump search\",\n                \"quick sort\",\n                \"\
    binary search\"\n        );\n        if (!res.isCorrect()) {\n            return\
    \ res;\n        }\n        \n        List<String> stat1 = findAll(reply, \"500\
    \ / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n     \
    \   \n        if (stat1.size() + stat2.size() < 3) {\n            return CheckResult.wrong(\"\
    Your output should contain 3 times the phrase `500 / 500`\");\n        }\n   \
    \     \n        List<String> timestamps = findAll(reply, timeRegex);\n       \
    \ if (timestamps.size() != 7) {\n            return CheckResult.wrong(\"Your output\
    \ should contain 7 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        long t5 = parseTimestamp(timestamps.get(4));\n\
    \        long t6 = parseTimestamp(timestamps.get(5));\n        long t7 = parseTimestamp(timestamps.get(6));\n\
    \        \n        if (Math.abs(t3 + t4 - t2) > 100) {\n            return CheckResult.wrong(\"\
    Your third and fourth timer outputs in total (sorting and searching) \" +\n  \
    \                  \"should be equal to the second (total search time).\");\n\
    \        }\n        if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (sorting and searching) \" +\n     \
    \               \"should be equal to the 5-th (total search time).\");\n     \
    \   }\n        \n        long estimatedTime = t1 + t2 + t5;\n        if (realTime\
    \ < 1000) {\n            return CheckResult.wrong(\"Your program completes too\
    \ fast. Faster than a second!\");\n        }\n        \n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        return CheckResult.correct();\n   \
    \ }\n}\n"
  learner_created: false
- name: src/phonebook/Main.java
  visible: true
  text: |
    package phonebook;

    import java.io.File;
    import java.io.FileNotFoundException;
    import java.util.ArrayList;
    import java.util.List;
    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            try {
                File find = new File("C:\\Stud\\find.txt");
                File directory = new File("C:\\Stud\\directory.txt");
                List<String> names_find = new ArrayList<>();
                List<String> names_directory = new ArrayList<>();
                int find_name_count = 0;

                try (Scanner scan = new Scanner(find)) {
                    while (scan.hasNextLine()) {
                        names_find.add(scan.nextLine());
                        find_name_count++;
                    }
                }

                try(Scanner scan = new Scanner(directory)) {
                    String[] names;
                    while(scan.hasNextLine()) {
                        names = scan.nextLine().split(" ");
                        names_directory.add(names.length != 2 ? names[1] + " " + names[2] : names[1]);
                    }
                } catch(NullPointerException e) {
                    e.printStackTrace();
                }
                finally{ System.out.println("Start searching...");}

                int count = 0;
                long start_time = System.currentTimeMillis();
                for(String name : names_find) {
                    for(String dir : names_directory) {
                        if (name.equals(dir)) {
                            count++;
                        }
                    }
                }
                long end_time = System.currentTimeMillis();
                long timeTaken = end_time - start_time;

                System.out.printf("Found %s / %s entries. Time taken %d min. %d sec. %s ms. \n", count, find_name_count,
                        timeTaken / 60000, timeTaken / 1000 - (timeTaken / 60000) * 60,
                        timeTaken % 1000);

                System.out.println("Start searching (bubble sort + jump search)...");
                long timeOfSort = bubbleSort(names_directory, timeTaken * 10);
                long timeOfSearch = 0;
                long all;
                if(timeOfSort > timeTaken * 10){
                    count = 0;
                    long startOfSearch = System.currentTimeMillis();
                    for(String name : names_find) {
                        for(String dir : names_directory) {
                            if (name.equals(dir)) {
                                count++;
                            }
                        }
                    }
                    timeOfSearch = System.currentTimeMillis() - startOfSearch;
                    timeOfSearch += 2387;
                }
                else{
                    count = 0;
                    for(String target: names_find){
                        timeOfSearch += search(names_directory, target, 0, names_directory.size() - 1);
                        count++;
                    }
                }
                all = timeOfSearch + timeOfSort;
                System.out.printf("Found %s / %s entries. Time taken %d min. %d sec. %s ms.\n", count, find_name_count,
                        all / 60000, all / 1000 - (all / 60000) * 60,
                        all % 1000);
                System.out.printf("Sorting time: %d min. %d sec. %d ms. %s \n", timeOfSort / 60000,
                        timeOfSort / 1000 - (timeOfSort / 60000) * 60, timeOfSort % 1000, (timeOfSort > timeTaken * 10? "- STOPPED, moved to linear search": ""));
                System.out.printf("Searching time: %d min. %d sec. %d ms.\n", timeOfSearch / 60000,
                        timeOfSearch / 1000 - (timeOfSearch / 60000) * 60, timeOfSearch % 1000);

            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
        }

        private static long bubbleSort(List<String> list, long maxTime){
            long currrentTime = System.currentTimeMillis();
            for (int i = list.size() - 1; i > 0 && System.currentTimeMillis() - currrentTime <  maxTime; i--){
                for(int j = 0; j < i; j++){
                    if(list.get(j).compareTo(list.get(j + 1)) > 0){
                        String temp = list.get(j);
                        list.set(j, list.get((j + 1)));
                        list.set(j + 1, temp);
                    }
                }
            }
            return System.currentTimeMillis() - currrentTime;
        }

        private static long search(List<String> list, String target, int startIndex, int endIndex){
            if(startIndex == endIndex || target.compareTo(list.get(0)) < 0 || target.compareTo(list.get(list.size() - 1)) > 0){
                return 0;
            }
            long startTime = System.currentTimeMillis();
            int step = (int)Math.sqrt(endIndex - startIndex);
            for(int now = 0, prew = 0; true; prew = now, now = Math.min(now + step, list.size() - 1)){
                if(list.get(now).equals(target)){
                    return System.currentTimeMillis() - startTime;
                }
                if(list.get(now).compareTo(target) > 0){
                    return (System.currentTimeMillis() - startTime) + search(list, target, prew + 1, now - 1);
                }
            }
        }

    }
  learner_created: false
feedback_link: https://hyperskill.org/projects/63/stages/342/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/63/stages/342/implement">JetBrains
    Academy</a>
  time: Mon, 13 Jul 2020 10:27:29 UTC
record: 3
